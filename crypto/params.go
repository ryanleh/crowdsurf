package crypto

import (
	"math/big"
)

import (
	"github.com/ryanleh/secure-inference/crypto/rlwe"
	m "github.com/ryanleh/secure-inference/matrix"
)

type Params struct {
	// LWE params
	N     uint64  // secret dimension
	M     uint64  // supported # of samples
	P     uint64  // plaintext modulus
	LogQ  uint64  // (log of) ciphertext modulus
	Delta uint64  // Plaintext multiplier
	Sigma float64 // Error distribution stddev
}

type Context[T m.Elem] struct {
	Params *Params

	// RLWE context for fast queries. This has the same underlying parameters
	// as the LWE scheme, except the ciphertext modulus is one bit bigger
	RingContext *rlwe.Context[T]
}

/*
   ===== TODO: Revise all the below once hint compression is working properly =====
*/

func NewContext[T m.Elem](logq uint64, nSamples uint64, pMod uint64) *Context[T] {
	// Initialize LWE context
	lweParams := NewParamsFixedP(logq, nSamples, pMod)
	if lweParams == nil {
		panic("Invalid LWE Parameters")
	}

	queryCtx := rlwe.NewContext[T](lweParams.P, lweParams.N, true)
	return &Context[T]{lweParams, queryCtx}
}

func (c *Context[T]) Free() {
	c.RingContext.Free()
}

func (p *Params) Round(x uint64) uint64 {
	v := (x + p.Delta/2) / p.Delta
	return v % p.P
}

func NewParamsFixedP(logq uint64, nSamples uint64, pMod uint64) *Params {
	if CheckParams(logq, nSamples, pMod) {
		return newParamsFixedP(logq, nSamples, pMod)
	}

	return nil
}

func CheckParams(logq uint64, nSamples uint64, pMod uint64) bool {
	options := pMod32
	if logq == 64 {
		options = pMod64
	}

	for mNew, pNew := range options {
		if nSamples <= mNew && pMod <= pNew {
			return true
		}
	}

	return false
}

func newParamsFixedP(logq uint64, nSamples uint64, pMod uint64) *Params {
	p := &Params{
		LogQ: logq,
		M:    nSamples,
		P:    pMod,
	}

	b := big.NewInt(int64(1))
	pInt := big.NewInt(int64(pMod))
	b.Lsh(b, uint(logq))
	b.Div(b, pInt)
	p.Delta = uint64(b.Int64())

	p.N = secretDims[logq]
	p.Sigma = errorStdDev
	return p
}

//*** q=90.0 => p=2545851816711.831 (41.2112855871427)
//*** q=91.0 => p=3600378166137.745 (41.711285586802774)
//*** q=92.0 => p=5091703631375.662 (42.21128558656241)
//*** q=93.0 => p=7200756330227.49 (42.71128558639245)
//*** q=94.0 => p=10183407260703.324 (43.21128558627227)
//*** q=95.0 => p=14401512658406.98 (43.71128558618729)
//*** q=96.0 => p=20366814519358.65 (44.2112855861272)
//*** q=97.0 => p=28803025314765.96 (44.711285586084706)
//*** q=98.0 => p=40733629036669.3 (45.211285586054665)
//*** q=99.0 => p=57606050627483.92 (45.71128558603342)
//*** q=100.0 => p=81467258071290.6 (46.21128558601839)
//*** q=101.0 => p=115212101252919.84 (46.71128558600777)
//*** q=102.0 => p=162934516140533.2 (47.21128558600026)
//*** q=103.0 => p=230424202503791.7 (47.71128558599495)
//*** q=104.0 => p=325869032279018.4 (48.21128558599119)
//*** q=105.0 => p=460848405005535.4 (48.711285585988534)
//*** q=106.0 => p=651738064555988.8 (49.21128558598666)

// Hint compression parameters for target q = 1 << 32, n = 2048
//
//q=80.0 => p=1.84476122310306e11 (37.42464313671972)
//q=81.0 => p=3.68952244620611e11 (38.42464313671972)
//q=82.0 => p=7.37904489241222e11 (39.42464313671972)
//q=83.0 => p=1.47580897848244e12 (40.42464313671972)
//q=84.0 => p=2.95161795696489e12 (41.42464313671972)
//q=85.0 => p=5.90323591392978e12 (42.42464313671972)
//q=86.0 => p=1.18064718278596e13 (43.42464313671972)
//q=87.0 => p=2.36129436557191e13 (44.42464313671972)
//q=88.0 => p=4.72258873114382e13 (45.42464313671972)
//q=89.0 => p=9.44517746228765e13 (46.42464313671972)
//q=90.0 => p=1.88903549245753e14 (47.42464313671972)
//q=91.0 => p=3.77807098491506e14 (48.42464313671972)
//q=92.0 => p=7.55614196983012e14 (49.42464313671972)
//q=93.0 => p=1.51122839396602e15 (50.42464313671972)
//q=94.0 => p=3.02245678793205e15 (51.42464313671972)
//q=95.0 => p=6.04491357586409e15 (52.42464313671972)
//q=96.0 => p=1.20898271517282e16 (53.42464313671972)
//q=97.0 => p=2.41796543034564e16 (54.42464313671972)
//q=98.0 => p=4.83593086069128e16 (55.42464313671972)
//q=99.0 => p=9.67186172138255e16 (56.42464313671972)
//q=100.0 => p=1.93437234427651e17 (57.42464313671972)
//q=101.0 => p=3.86874468855302e17 (58.42464313671972)
//q=102.0 => p=7.73748937710604e17 (59.42464313671972)
//q=103.0 => p=1.54749787542121e18 (60.42464313671972)
//q=104.0 => p=3.09499575084242e18 (61.42464313671972)
//q=105.0 => p=6.18999150168483e18 (62.42464313671972)
//q=106.0 => p=1.23799830033697e19 (63.42464313671972)
//q=107.0 => p=2.47599660067393e19 (64.42464313671972)
//q=108.0 => p=4.95199320134787e19 (65.42464313671972)

// Hint compression parameters for target q = 1 << 32, n = 4096
//q=80.0 => p=1.84476122310306e11 (37.42464313671972)
//q=81.0 => p=3.68952244620611e11 (38.42464313671972)
//q=82.0 => p=7.37904489241222e11 (39.42464313671972)
//q=83.0 => p=1.47580897848244e12 (40.42464313671972)
//q=84.0 => p=2.95161795696489e12 (41.42464313671972)
//q=85.0 => p=5.90323591392978e12 (42.42464313671972)
//q=86.0 => p=1.18064718278596e13 (43.42464313671972)
//q=87.0 => p=2.36129436557191e13 (44.42464313671972)
//q=88.0 => p=4.72258873114382e13 (45.42464313671972)
//q=89.0 => p=9.44517746228765e13 (46.42464313671972)
//q=90.0 => p=1.88903549245753e14 (47.42464313671972)
//q=91.0 => p=3.77807098491506e14 (48.42464313671972)
//q=92.0 => p=7.55614196983012e14 (49.42464313671972)
//q=93.0 => p=1.51122839396602e15 (50.42464313671972)
//q=94.0 => p=3.02245678793205e15 (51.42464313671972)
//q=95.0 => p=6.04491357586409e15 (52.42464313671972)
//q=96.0 => p=1.20898271517282e16 (53.42464313671972)
//q=97.0 => p=2.41796543034564e16 (54.42464313671972)
//q=98.0 => p=4.83593086069128e16 (55.42464313671972)
//q=99.0 => p=9.67186172138255e16 (56.42464313671972)
//q=100.0 => p=1.93437234427651e17 (57.42464313671972)
//q=101.0 => p=3.86874468855302e17 (58.42464313671972)
//q=102.0 => p=7.73748937710604e17 (59.42464313671972)
//q=103.0 => p=1.54749787542121e18 (60.42464313671972)
//q=104.0 => p=3.09499575084242e18 (61.42464313671972)
//q=105.0 => p=6.18999150168483e18 (62.42464313671972)
//q=106.0 => p=1.23799830033697e19 (63.42464313671972)
//q=107.0 => p=2.47599660067393e19 (64.42464313671972)
//q=108.0 => p=4.95199320134787e19 (65.42464313671972)
